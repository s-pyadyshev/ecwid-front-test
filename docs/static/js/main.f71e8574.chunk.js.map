{"version":3,"sources":["components/Gallery/index.js","components/DragAndDrop/index.js","store/store.js","App.js","serviceWorker.js","index.js"],"names":["Image","props","url","width","height","imageWidth","useState","loaded","setLoaded","useEffect","src","alt","style","Gallery","fileReader","storeImages","dispatch","imageInput","setImageInput","inputRef","useRef","galleryImages","handleFileRead","content","JSON","parse","result","className","type","onChange","event","target","value","onClick","preventDefault","files","id","ref","e","file","FileReader","onloadend","readAsText","map","image","index","key","DragAndDrop","data","children","inDropZone","onDrop","stopPropagation","dataTransfer","readAsDataURL","onload","onabort","alert","onerror","clearData","dropDepth","handleDrop","onDragOver","dropEffect","handleDragOver","onDragEnter","handleDragEnter","onDragLeave","handleDragLeave","reducer","state","action","fileList","filter","App","React","useReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f71e8574.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport \"./style.scss\";\n\nconst Image = (props) => {\n  const { url, width, height, imageWidth } = props;\n  const [loaded, setLoaded] = useState(false);\n\n  useEffect(() => {\n    setLoaded(true);\n  }, []);\n\n  return (\n    <>\n      {loaded ? (\n        <img\n          src={url}\n          width={width}\n          height={height}\n          alt=\".some alt text\"\n          style={{ width: imageWidth }}\n        />\n      ) : (\n        <div style={{ width: imageWidth }}>...loading</div>\n      )}\n    </>\n  );\n};\n\nconst Gallery = (props) => {\n  const { storeImages, dispatch } = props;\n  // input text\n  const [imageInput, setImageInput] = useState(\"\");\n  const inputRef = useRef();\n\n  let fileReader;\n  let galleryImages = [];\n\n  const handleFileRead = () => {\n    const content = JSON.parse(fileReader.result).galleryImages;\n    galleryImages = content;\n  };\n\n  const handleFileChosen = (file) => {\n    fileReader = new FileReader();\n    fileReader.onloadend = handleFileRead;\n    fileReader.readAsText(file);\n  };\n\n  // загрузить картинку файлом\n  const handleSubmitJson = (event) => {\n    event.preventDefault();\n\n    dispatch({\n      type: \"ADD_JSON_TO_LIST\",\n      files: galleryImages,\n    });\n  };\n\n  // вставить картинку ссылкой\n  const handleInputText = (event) => {\n    setImageInput(event.target.value);\n  };\n\n  const handleImageAdd = (event) => {\n    event.preventDefault();\n    dispatch({\n      type: \"ADD_FILE_TO_LIST\",\n      files: imageInput,\n    });\n  };\n\n  // удалить картинку\n  const handleImageDelete = (imageIndex) => {\n    dispatch({\n      type: \"REMOVE_IMAGE\",\n      index: imageIndex,\n    });\n  };\n\n  return (\n    <div className=\"gallery\">\n      <form>\n        <div>\n          <input type=\"text\" onChange={handleInputText} />\n          <button onClick={handleImageAdd}>Добавить картинку</button>\n        </div>\n        <div>\n          <input\n            type=\"file\"\n            id=\"upload\"\n            ref={inputRef}\n            onChange={(e) => handleFileChosen(e.target.files[0])}\n          />\n          <button onClick={handleSubmitJson}>Загрузить</button>\n        </div>\n      </form>\n\n      <ul className=\"gallery__list\">\n        {storeImages.map((image, index) => (\n          <li key={index} className=\"gallery__item\">\n            <Image url={image.url} width={image.width} height={image.height} />\n            <button\n              className=\"gallery__item-remove\"\n              onClick={() => handleImageDelete(index)}\n            >\n              remove\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Gallery;\n","import React from \"react\";\nimport \"./style.scss\";\n\nconst DragAndDrop = (props) => {\n  const { data, dispatch, children } = props;\n\n  const handleDragEnter = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    dispatch({ type: \"SET_DROP_DEPTH\", dropDepth: data.dropDepth + 1 });\n  };\n\n  const handleDragLeave = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    dispatch({ type: \"SET_DROP_DEPTH\", dropDepth: data.dropDepth - 1 });\n\n    if (data.dropDepth > 0) return;\n\n    dispatch({ type: \"SET_IN_DROP_ZONE\", inDropZone: false });\n  };\n\n  const handleDragOver = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    e.dataTransfer.dropEffect = \"copy\";\n\n    dispatch({ type: \"SET_IN_DROP_ZONE\", inDropZone: true });\n  };\n\n  const handleDrop = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    // текущий выбранный или перетаскиваемый файл\n    const file = [...e.dataTransfer.files][0];\n\n    let fileReader = new FileReader();\n    // Прочитать файл как Data URL - сконвертировать картинку в base64\n    fileReader.readAsDataURL(file);\n\n    fileReader.onload = () => {\n      const files = fileReader.result;\n\n      dispatch({ type: \"ADD_FILE_TO_LIST\", files });\n    };\n\n    fileReader.onabort = () => {\n      alert(\"Reading aborted\");\n    };\n\n    fileReader.onerror = () => {\n      alert(\"Reading error\");\n    };\n\n    e.dataTransfer.clearData();\n\n    dispatch({\n      type: \"SET_DROP_DEPTH\",\n      dropDepth: 0,\n    });\n\n    dispatch({\n      type: \"SET_IN_DROP_ZONE\",\n      inDropZone: false,\n    });\n  };\n\n  return (\n    <div\n      className={\n        data.inDropZone ? \"drag-drop-zone inside-drag-area\" : \"drag-drop-zone\"\n      }\n      onDrop={(e) => handleDrop(e)}\n      onDragOver={(e) => handleDragOver(e)}\n      onDragEnter={(e) => handleDragEnter(e)}\n      onDragLeave={(e) => handleDragLeave(e)}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport default DragAndDrop;\n","export const reducer = (state, action) => {\n  switch (action.type) {\n    case \"SET_DROP_DEPTH\":\n      return { ...state, dropDepth: action.dropDepth };\n    case \"SET_IN_DROP_ZONE\":\n      return { ...state, inDropZone: action.inDropZone };\n    case \"ADD_FILE_TO_LIST\":\n      return {\n        ...state,\n        fileList: [...state.fileList, { url: action.files }],\n      };\n    case \"ADD_JSON_TO_LIST\":\n      return {\n        ...state,\n        fileList: [...state.fileList, ...action.files],\n      };\n    case \"REMOVE_IMAGE\":\n      return {\n        ...state,\n        fileList: [\n          ...state.fileList.filter((image, index) => index !== action.index),\n        ],\n      };\n    default:\n      return state;\n  }\n};\n","import React from \"react\";\nimport Gallery from \"./components/Gallery\";\nimport DragAndDrop from \"./components/DragAndDrop\";\nimport { reducer } from \"./store/store\";\nimport \"./App.scss\";\n\nfunction App() {\n  const [data, dispatch] = React.useReducer(reducer, {\n    dropDepth: 0,\n    inDropZone: false,\n    fileList: [],\n  });\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <DragAndDrop data={data} dispatch={dispatch}>\n          <Gallery storeImages={data.fileList} dispatch={dispatch} />\n        </DragAndDrop>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}